{"logLevel":"debug","message":"multithreading is set to false"}
{"logLevel":"debug","message":"Using reflection to scan dependencies for gauge implementations..."}
SLF4J(W): No SLF4J providers were found.
SLF4J(W): Defaulting to no-operation (NOP) logger implementation
SLF4J(W): See https://www.slf4j.org/codes.html#noProviders for further details.
{"logLevel":"debug","message":"gauge-java took 591milliseconds to load and scan. This should be less than 'runner_connection_timeout' config value."}
{"logLevel":"debug","message":"run 'gauge config runner_connection_timeout' and verify that it is < 591"}
{"logLevel":"debug","message":"starting gRPC server..."}
{"logLevel":"debug","message":"started gRPC server on port 61649"}
{"logLevel":"info","message":"Listening on port:61649"}
{"logLevel":"debug","message":"Scanning packages for steps"}
{"logLevel":"debug","message":"Comparing 'base.Swipe.openNotificationsBarSwipe' and 'base.Swipe.openNotificationsBarSwipe'"}
{"logLevel":"debug","message":"Found Open notifications bar by swiping down in current project scope."}
{"logLevel":"debug","message":"Comparing 'com.example.BaseMethods.checkElementVisibility' and 'com.example.BaseMethods.checkElementVisibility'"}
{"logLevel":"debug","message":"Found Check element existence {} must be {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'base.Swipe.closeNotificationsBarSwipe' and 'base.Swipe.closeNotificationsBarSwipe'"}
{"logLevel":"debug","message":"Found Close notifications bar by swiping down in current project scope."}
{"logLevel":"debug","message":"Comparing 'com.example.BaseMethods.longPress' and 'com.example.BaseMethods.longPress'"}
{"logLevel":"debug","message":"Found Long press on element {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'com.example.BaseMethods.findElementWithHorizontalSwipe' and 'com.example.BaseMethods.findElementWithHorizontalSwipe'"}
{"logLevel":"debug","message":"Found Search Element {} with Horizontal Swipe {} times in current project scope."}
{"logLevel":"debug","message":"Comparing 'com.example.BaseMethods.captureNotification' and 'com.example.BaseMethods.captureNotification'"}
{"logLevel":"debug","message":"Found Get text and title value from Notifications and store it in current project scope."}
{"logLevel":"debug","message":"Comparing 'com.example.BaseMethods.createWebElement' and 'com.example.BaseMethods.createWebElement'"}
{"logLevel":"debug","message":"Found Check element existence {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'com.example.BaseMethods.writeTextToInputArea' and 'com.example.BaseMethods.writeTextToInputArea'"}
{"logLevel":"debug","message":"Found Write text {} to this element {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'com.example.BaseMethods.checkNotificationsElement' and 'com.example.BaseMethods.checkNotificationsElement'"}
{"logLevel":"debug","message":"Found Check Notifications title and text values in current project scope."}
{"logLevel":"debug","message":"Comparing 'base.Swipe.swipeWithoutDirection' and 'base.Swipe.swipeWithoutDirection'"}
{"logLevel":"debug","message":"Found Swipe in current project scope."}
{"logLevel":"debug","message":"Comparing 'com.example.BaseMethods.findElementWithSwipe' and 'com.example.BaseMethods.findElementWithSwipe'"}
{"logLevel":"debug","message":"Found Search Element {} with Swipe {} times in current project scope."}
{"logLevel":"debug","message":"Comparing 'base.Swipe.swipe' and 'base.Swipe.swipe'"}
{"logLevel":"debug","message":"Found Swipe {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'base.Swipe.swipeWithoutDirection' and 'base.Swipe.swipeWithoutDirection'"}
{"logLevel":"debug","message":"Found Swipe {} times in current project scope."}
{"logLevel":"debug","message":"Comparing 'com.example.BaseMethods.clickButton' and 'com.example.BaseMethods.clickButton'"}
{"logLevel":"debug","message":"Found Click button {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'base.Swipe.swipeByCoordinate' and 'base.Swipe.swipeByCoordinate'"}
{"logLevel":"debug","message":"Found Swipe from coordinates {}, {} to {}, {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'com.example.BaseMethods.getTextValueFromElement' and 'com.example.BaseMethods.getTextValueFromElement'"}
{"logLevel":"debug","message":"Found Get Text Value from {} and compare with {} in current project scope."}
{"logLevel":"debug","message":"Scanning packages for hooks"}
{"logLevel":"debug","message":"Scanned steps (using static parsing + reflections): "}
{"logLevel":"debug","message":"\tSwipe {} times : public void swipeWithoutDirection(ınt repeatCount)"}
{"logLevel":"debug","message":"\tSwipe {} : public void swipe(SwipeDirection direction)"}
{"logLevel":"debug","message":"\tWrite text {} to this element {} : public void writeTextToInputArea(String text, String ElementName)"}
{"logLevel":"debug","message":"\tSwipe from coordinates {}, {} to {}, {} : public void swipeByCoordinate(ınt startX, ınt startY, ınt endX, ınt endY)"}
{"logLevel":"debug","message":"\tCheck element existence {} : public WebElement createWebElement(String ElementName)"}
{"logLevel":"debug","message":"\tSearch Element {} with Horizontal Swipe {} times : public WebElement findElementWithHorizontalSwipe(String ElementName, ınt retries)"}
{"logLevel":"debug","message":"\tCheck Notifications title and text values : public void checkNotificationsElement()"}
{"logLevel":"debug","message":"\tOpen notifications bar by swiping down : public void openNotificationsBarSwipe()"}
{"logLevel":"debug","message":"\tSearch Element {} with Swipe {} times : public WebElement findElementWithSwipe(String ElementName, ınt retries)"}
{"logLevel":"debug","message":"\tCheck element existence {} must be {} : public void checkElementVisibility(String ElementName, Visibility status)"}
{"logLevel":"debug","message":"\tGet Text Value from {} and compare with {} : public void getTextValueFromElement(String elementName, String expectedValue)"}
{"logLevel":"debug","message":"\tSwipe : public void swipeWithoutDirection()"}
{"logLevel":"debug","message":"\tGet text and title value from Notifications and store it : public void captureNotification()"}
{"logLevel":"debug","message":"\tClose notifications bar by swiping down : public void closeNotificationsBarSwipe()"}
{"logLevel":"debug","message":"\tClick button {} : public void clickButton(String ElementName)"}
{"logLevel":"debug","message":"\tLong press on element {} : public void longPress(String elementName)"}
Cannot connect to Appium server on port 4723, it seems to be free.
Script path: /Users/testinium/AquaProjects/TeknasyonMobileUI/startAppium.sh
Starting Appium server with command: [osascript, -e, tell application "Terminal", -e, do script "bash /Users/testinium/AquaProjects/TeknasyonMobileUI/startAppium.sh", -e, end tell]
Server will be available at 127.0.0.1:4723 in 5 seconds
No Android devices found.
null
Eyl 27, 2024 9:02:43 ÖS base.Base beforeScenario
SEVERE: Error creating capabilities: No iOS devices found.
Eyl 27, 2024 9:02:43 ÖS base.Base afterScenario
INFO: ------------ Scenario is ending ------------
Eyl 27, 2024 9:02:43 ÖS base.Base afterScenario
WARNING: Driver was not initialized.
{"logLevel":"debug","message":"Killing Java runner..."}
{"logLevel":"debug","message":"Stopping execution pool..."}
{"logLevel":"debug","message":"Shutting down grpc server..."}
